# ==============================================================================
#
# Client (HTTP-client)
#
# This file was generated by a code generator.
# Don't make changes to it manually.
#
# ==============================================================================

# jinja2: lstrip_blocks: "True"
# mypy: ignore-errors

from __future__ import annotations

import abc
import datetime
import logging
from dataclasses import dataclass
from typing import IO
from typing import Any
from typing import Literal
from typing import Union

import httpx
from httpx import Timeout
from pydantic import BaseModel
from pydantic import Field


# backward compatibility for httpx<0.18.2
try:
    DEFAULT_AUTH = httpx.USE_CLIENT_DEFAULT
except AttributeError:
    DEFAULT_AUTH = None


@dataclass
class RequestBox:
    client_name: str
    method: str
    url: str
    params: dict[str, Any]
    headers: dict[str, Any]
    content: Any


@dataclass
class ResponseBox:
    status_code: int


class BaseLogsIntegration(abc.ABC):
    @abc.abstractmethod
    def log_extra(self, **kwargs: Any) -> dict[str, Any]:
        ...

    @abc.abstractmethod
    def log_error(self, req: RequestBox, resp: ResponseBox) -> None:
        ...

    @abc.abstractmethod
    def get_log_error_level(self, req: RequestBox, resp: ResponseBox) -> int:
        ...


class DefaultLogsIntegration(BaseLogsIntegration):
    def log_extra(self, **kwargs: Any) -> dict[str, Any]:
        return {"props": {"data": kwargs}}

    def log_error(self, req: RequestBox, resp: ResponseBox) -> None:
        msg = f"request error"
        msg += f" | client={req.client_name}"
        msg += f" | method={req.method}"
        msg += f" | url={req.url}"
        msg += f" | params={req.params}"
        msg += f" | content={req.content}"
        msg += f" | headers={req.headers}"

        level = self.get_log_error_level(req, resp)

        logging.log(
            level,
            msg,
            extra=self.log_extra(
                client=req.client_name,
                method=req.method,
                content=req.content,
                url=req.url,
                params=req.params,
            ),
        )

    def get_log_error_level(self, req: RequestBox, resp: ResponseBox) -> int:
        if resp.status_code >= 500:
            return logging.ERROR
        elif resp.status_code >= 400:
            return logging.WARNING
        elif resp.status_code >= 300:
            return logging.INFO
        elif resp.status_code >= 200:
            return logging.INFO
        else:
            return logging.INFO


FileContent = Union[IO[str], IO[bytes], str, bytes]
FileTypes = Union[
    # file (or text)
    FileContent,
    # (filename, file (or text))
    tuple[str | None, FileContent],
    # (filename, file (or text), content_type)
    tuple[str | None, FileContent, str | None],
]


class RequiredHeaders(Exception):
    ...


class EmptyBody(BaseModel):
    status_code: int
    text: str


class LoginuserResponse200(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    text: str | None = None


class CreateuserswithlistinputRequestBody(BaseModel):
    """
    None
    """

    # required ---

    # optional ---


class GetinventoryResponse200(BaseModel):
    """
    None
    """

    # required ---

    # optional ---


class UploadfileRequestBody(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    content: bytes | None = None


class FindpetsbytagsResponse200(BaseModel):
    """
    None
    """

    # required ---

    # optional ---


class FindpetsbystatusResponse200(BaseModel):
    """
    None
    """

    # required ---

    # optional ---


class AddpetRequestBody(BaseModel):
    """
    None
    """

    __root__: Union[
        "Pet",
        "Tag",
    ]


class AddpetResponse200(BaseModel):
    """
    None
    """

    __root__: Union[
        "Pet",
        "Tag",
    ]


class ApiResponse(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    code: int | None = None
    type: str | None = None
    message: str | None = None


class Tag(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    id: int | None = None
    name: str | None = None


class Category(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    id: int | None = None
    name: str | None = None


class Pet(BaseModel):
    """
    None
    """

    # required ---
    name: str
    photoUrls: list[str]

    # optional ---
    id: int | None = None
    category: Category | None = None
    tags: list[Tag] | None = None
    status: Literal["available", "pending", "sold"] | None = Field(description="pet status in the store")


class User(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    id: int | None = None
    username: str | None = None
    firstName: str | None = None
    lastName: str | None = None
    email: str | None = None
    password: str | None = None
    phone: str | None = None
    userStatus: int | None = Field(description="User Status")


class Address(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    street: str | None = None
    city: str | None = None
    state: str | None = None
    zip: str | None = None


class Customer(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    id: int | None = None
    username: str | None = None
    address: list[Address] | None = None


class Order(BaseModel):
    """
    None
    """

    # required ---

    # optional ---
    id: int | None = None
    petId: int | None = None
    quantity: int | None = None
    shipDate: datetime.datetime | None = None
    status: Literal["placed", "approved", "delivered"] | None = Field(description="Order Status")
    complete: bool | None = None


class BasicAuth(BaseModel):
    username: str
    password: str


class Client:
    def __init__(
        self,
        base_url: str,
        timeout: int = 5,
        client_name: str = "",
        client: httpx.AsyncClient | None = None,
        headers: dict[str, str] | None = None,
        logs_integration: BaseLogsIntegration | None = DefaultLogsIntegration(),
    ):
        self.client = client or httpx.AsyncClient(timeout=Timeout(timeout))
        self.base_url = base_url
        self.headers = headers or {}
        self.logs_integration = logs_integration
        self.client_name = client_name

    async def findPetsByStatus(
        self,
        status: Literal["available", "pending", "sold"] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> list[Pet] | EmptyBody:
        url = self._get_url(f"/pet/findByStatus")

        params = {}
        if status is not None:
            params["status"] = status

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return [Pet.parse_obj(item) for item in response.json()]

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def findPetsByTags(
        self,
        tags: list[str] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> list[Pet] | EmptyBody:
        url = self._get_url(f"/pet/findByTags")

        params = {}
        if tags is not None:
            params["tags"] = tags

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return [Pet.parse_obj(item) for item in response.json()]

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def getPetById(
        self,
        petId: int,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> Pet | EmptyBody:
        url = self._get_url(f"/pet/{petId}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return Pet.parse_obj(response.json())

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def getInventory(
        self,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> GetinventoryResponse200 | None:
        url = self._get_url(f"/store/inventory")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return GetinventoryResponse200.parse_obj(response.json())

    async def getOrderById(
        self,
        orderId: int,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> Order | EmptyBody:
        url = self._get_url(f"/store/order/{orderId}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return Order.parse_obj(response.json())

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def loginUser(
        self,
        username: str | None = None,
        password: str | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> LoginuserResponse200 | EmptyBody:
        url = self._get_url(f"/user/login")

        params = {}
        if username is not None:
            params["username"] = username
        if password is not None:
            params["password"] = password

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return LoginuserResponse200(text=response.text)

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def logoutUser(
        self,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> None:
        url = self._get_url(f"/user/logout")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

    async def getUserByName(
        self,
        username: str,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> User | EmptyBody:
        url = self._get_url(f"/user/{username}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "get", url, headers=headers_, params=params, content=content, auth=auth_
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="get",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return User.parse_obj(response.json())

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def addPet(
        self,
        body: Pet | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> Pet | EmptyBody:
        url = self._get_url(f"/pet")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, Pet):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return Pet.parse_obj(response.json())

        if response.status_code == 405:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def addPet(
        self,
        body: AddpetRequestBody | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> AddpetResponse200 | EmptyBody:
        url = self._get_url(f"/pet_or_tag")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, AddpetRequestBody):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return self._parse_any_of(response.json(), [Pet, Tag])

        if response.status_code == 405:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def updatePetWithForm(
        self,
        petId: int,
        name: str | None = None,
        status: str | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> EmptyBody | None:
        url = self._get_url(f"/pet/{petId}")

        params = {}
        if name is not None:
            params["name"] = name
        if status is not None:
            params["status"] = status

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 405:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def uploadFile(
        self,
        petId: int,
        body: bytes | dict[str, Any] | None = None,
        additional_metadata: str | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> ApiResponse | None:
        url = self._get_url(f"/pet/{petId}/uploadImage")

        params = {}
        if additional_metadata is not None:
            params["additionalMetadata"] = additional_metadata

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, bytes):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return ApiResponse.parse_obj(response.json())

    async def placeOrder(
        self,
        body: Order | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> Order | EmptyBody:
        url = self._get_url(f"/store/order")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, Order):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return Order.parse_obj(response.json())

        if response.status_code == 405:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def createUser(
        self,
        body: User | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> None:
        url = self._get_url(f"/user")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, User):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

    async def createUsersWithListInput(
        self,
        body: list[User] | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> User | None:
        url = self._get_url(f"/user/createWithList")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, list[User]):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "post",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="post",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return User.parse_obj(response.json())

    async def updatePet(
        self,
        body: Pet | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> Pet | EmptyBody:
        url = self._get_url(f"/pet")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, Pet):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "put",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="put",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 200:
            return Pet.parse_obj(response.json())

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 405:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def updateUser(
        self,
        username: str,
        body: User | dict[str, Any] | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> None:
        url = self._get_url(f"/user/{username}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if isinstance(body, dict):
            json = body
        elif isinstance(body, User):
            json = body.dict(by_alias=True)
        else:
            json = None

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "put",
                url,
                json=json,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="put",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

    async def deletePet(
        self,
        petId: int,
        api_key: str | None = None,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> EmptyBody | None:
        url = self._get_url(f"/pet/{petId}")

        params = {}

        headers_ = self.headers.copy()
        if api_key is not None:
            headers_["api_key"] = api_key

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "delete",
                url,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="delete",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def deleteOrder(
        self,
        orderId: int,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> EmptyBody | None:
        url = self._get_url(f"/store/order/{orderId}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "delete",
                url,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="delete",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def deleteUser(
        self,
        username: str,
        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        headers: dict[str, Any] | None = None,
    ) -> EmptyBody | None:
        url = self._get_url(f"/user/{username}")

        params = {}

        headers_ = self.headers.copy()

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        if headers:
            headers_ = headers
        try:
            response = await self.client.request(
                "delete",
                url,
                headers=headers_,
                params=params,
                content=content,
                auth=auth_,
            )
        except Exception as exc:
            raise exc

        req = RequestBox(
            client_name=self.client_name,
            method="delete",
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if response.status_code == 400:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

        if response.status_code == 404:
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            return EmptyBody(status_code=response.status_code, text=response.text)

    async def close(self) -> None:
        await self.client.aclose()

    def _get_url(self, path: str) -> str:
        return f"{self.base_url}{path}"

    def log_extra(self, **kwargs: Any) -> dict[str, Any]:
        return {"extra": {"props": {"data": kwargs}}}

    def log_error(self, client_name: str, method, url: str, params, content, headers) -> None:
        msg = f"request error"
        msg += f" | client={client_name}"
        msg += f" | method={method}"
        msg += f" | url={url}"
        msg += f" | params={params}"
        msg += f" | content={content}"
        msg += f" | headers={headers}"

        logging.error(
            msg,
            **self.log_extra(
                client=client_name,
                method=method,
                content=content,
                url=url,
                params=params,
            ),
        )

    def _parse_any_of(self, item: dict[str, Any], schema_classes: list[Any]) -> Any:
        for schema_class in schema_classes:
            try:
                return schema_class.parse_obj(item)
            except:
                continue

        raise Exception('Can\'t parse "{item}"')


LoginuserResponse200.update_forward_refs()
CreateuserswithlistinputRequestBody.update_forward_refs()
GetinventoryResponse200.update_forward_refs()
UploadfileRequestBody.update_forward_refs()
FindpetsbytagsResponse200.update_forward_refs()
FindpetsbystatusResponse200.update_forward_refs()
AddpetRequestBody.update_forward_refs()
AddpetResponse200.update_forward_refs()
ApiResponse.update_forward_refs()
Tag.update_forward_refs()
Category.update_forward_refs()
Pet.update_forward_refs()
User.update_forward_refs()
Address.update_forward_refs()
Customer.update_forward_refs()
Order.update_forward_refs()
