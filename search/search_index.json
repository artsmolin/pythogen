{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>  Generator of python HTTP-clients from OpenApi specification based on httpx and pydantic. </p> <p> </p>"},{"location":"#overview","title":"Overview","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#with-pip","title":"with pip","text":"<pre><code>pip install pythogen\n</code></pre>"},{"location":"#with-docker","title":"with docker","text":"<pre><code>docker pull artsmolin/pythogen\n</code></pre>"},{"location":"#generation","title":"Generation","text":"<ul> <li><code>path/to/input</code> \u2014 path to the directory with openapi.yaml;</li> <li><code>path/to/output</code> \u2014 the path to the directory where the generated client will be saved;</li> </ul> <p>Generate a client using the installed library <pre><code>pythogen path/to/input/openapi.yaml path/to/output/client.py\n</code></pre> or via Docker <pre><code>docker run \\\n-v ./path/to/input:/opt/path/to/input \\\n-v ./path/to/output:/opt/path/to/output \\\nartsmolin/pythogen \\\npath/to/input/openapi.yaml \\\npath/to/output/client.py\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>Use the generated client. Below is an example of using a client generated for Petstore OpenAPI. <pre><code>from petstore.client_async import Client\nfrom petstore.client_async import Pet\nfrom petstore.client_async import EmptyBody\nfrom petstore.client_async import FindPetsByStatusQueryParams\n\npets: list[Pet] | EmptyBody = await client.findPetsByStatus(\n  query_params=FindPetsByStatusQueryParams(status=\"available\"),\n)\n</code></pre></p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Sync and async clients for Petstore OpenAPI</li> </ul>"},{"location":"development/","title":"Development","text":"<ul> <li>Activate environment   <pre><code>rm -rf .venv || true\npython3 -m venv .venv\nsource .venv/bin/activate\nmake requirements\n</code></pre></li> <li>Make your changes</li> <li>Execute <code>make clients</code></li> <li>Execute <code>make tests</code></li> </ul>"},{"location":"features/discriminator/","title":"Discriminator","text":"<p>Generate pydantic classes with discriminators based on OpenAPI discriminators. The original OpenAPI specification must have the <code>propertyName</code> and <code>mapping</code> fields.</p>"},{"location":"features/discriminator/#example","title":"Example","text":"<p>For OpenAPI schema <pre><code>DiscriminatedOneOfResp:\n      title: All Of Resp\n      type: object\n      required: ['required_discriminated_animal']\n      properties:\n        discriminated_animal:\n          discriminator:\n            mapping: {cat: '#/components/schemas/CatWithKind', dog: '#/components/schemas/DogWithKind'}\n            propertyName: kind\n          oneOf:\n            - {$ref: '#/components/schemas/CatWithKind'}\n            - {$ref: '#/components/schemas/DogWithKind'}\n          title: Animal\n        required_discriminated_animal:\n          discriminator:\n            mapping: {cat: '#/components/schemas/CatWithKind', dog: '#/components/schemas/DogWithKind'}\n            propertyName: kind\n          oneOf:\n            - {$ref: '#/components/schemas/CatWithKind'}\n            - {$ref: '#/components/schemas/DogWithKind'}\n          title: Animal\n</code></pre> the following class will be generated <pre><code>class DiscriminatedOneOfResp(BaseModel):\n    required_discriminated_animal: CatWithKind | DogWithKind = Field(..., discriminator=\"kind\")\n    discriminated_animal: CatWithKind | DogWithKind | None = Field(None, discriminator=\"kind\")\n</code></pre></p>"},{"location":"features/logs/","title":"Logs","text":"<p>Logging takes place using integration. By default, an instance of class <code>DefaultLogsIntegration</code> is used. To set your own logic, you can create your own class that satisfies the <code>LogsIntegration</code> protocol and pass it to the instance during client initialization.</p> <p>Usage with custom integration <pre><code>import logging\n\nfrom petstore.client_async import Client\nfrom petstore.client_async import Pet\nfrom petstore.client_async import EmptyBody\nfrom petstore.client_async import DefaultLogsIntegration\n\n\nclass CustomLogsIntegration(DefaultLogsIntegration):\n    def get_log_level(self, req: RequestBox, resp: ResponseBox) -&gt; int:\n        # your logic\n        ...\n\n\nclient = Client(\n    base_url=\"http://your.base.url\",\n    logs_integration=CustomLogsIntegration(),\n)\n</code></pre></p>"},{"location":"features/package/","title":"Client as package","text":"<p><pre><code>pythogen path/to/input/openapi.yaml path/to/package/output --package-version=0.0.1 --package-authors=\"Rick, Morty\"\n</code></pre> - <code>--package-version</code> \u2014 required; - <code>--package-authors</code> \u2014 optional; - <code>path/to/package/output</code> \u2014 path to the directory where package will be saved.</p>"},{"location":"features/property_safety_name/","title":"Property safety name","text":"<p>Property names are automatically converted to secure python names. However, you can explicitly specify the name with which the property will be generated for the data schema. To do this, specify the desired name in the property description in the format <code>__safety_key__(your_name)</code>.</p>"},{"location":"features/property_safety_name/#auto-converted-names","title":"Auto converted names","text":"<p>For OpenAPI schema with not safety property names <code>for</code>, <code>class</code>, <code>33with.dot-and-hyphens&amp;*</code> <pre><code>SafetyKeyForTesting:\n      title: model for testing safety key\n      type: object\n      properties:\n        for:\n          title: For\n          type: string\n          description: reserved word, expecting \"for_\"\n        class:\n          title: Class\n          type: string\n          description: reserved word, expecting \"class_\"\n        33with.dot-and-hyphens&amp;*:\n          title: With dot, hyphens and garbage\n          type: integer\n          description: invalid identifier, expecting \"with_dot_and_hyphens\"\n</code></pre></p> <p>the following class with  safety property names <code>for_</code>, <code>class_</code>, <code>with_dot_and_hyphens</code> will be generated <pre><code>class SafetyKeyForTesting(BaseModel):\n    for_: str | None = Field(None, alias=\"for\", description='reserved word, expecting \"for_\"')\n    class_: str | None = Field(None, alias=\"class\", description='reserved word, expecting \"class_\"')\n    with_dot_and_hyphens: int | None = Field(\n        None, alias=\"33with.dot-and-hyphens&amp;*\", description='invalid identifier, expecting \"with_dot_and_hyphens\"'\n    )\n</code></pre></p>"},{"location":"features/property_safety_name/#custom-names","title":"Custom names","text":"<p>For example, for the original schema with not safety property <code>event-data</code> <pre><code>PostObjectData:\n    title: PostObjectData\n    type: object\n    properties:\n        event-data:\n            title: Event-Data\n            type: object\n            description: __safety_key__(custom_name)\n</code></pre> the following class with property <code>custom_name</code> will be generated <pre><code>class PostObjectData(BaseModel):\n    custom_name: dict = Field(..., alias=\"event-data\", description=\"__safety_key__(custom_name)\")\n</code></pre></p>"},{"location":"features/sync_async_clients/","title":"Sync/async client","text":"<p>Asynchronous client <pre><code>pythogen path/to/input/openapi.yaml path/to/output/client.py\n</code></pre></p> <p>Synchronous client <pre><code>pythogen path/to/input/openapi.yaml path/to/output/client.py --sync\n</code></pre></p>"}]}