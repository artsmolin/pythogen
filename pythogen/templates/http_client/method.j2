    {%- for path, operation in items %}
    {%- if sync %}
    def {{ operation.fn_name }}(
    {%- else %}
    async def {{ operation.fn_name }}(
    {%- endif %}
        self,
        *,
        {#- path params -#}
        {% if operation.path_params %}
        path_params: {{ classname(operation.fn_name) }}PathParams | dict[str, Any],
        {% endif %}

        {#- query params -#}
        {% if operation.query_params %}
        query_params: {{ classname(operation.fn_name) }}QueryParams | dict[str, Any],
        {% endif %}

        {%- if operation.request_body and operation.request_body.is_multipart_form_data and operation.request_body.are_files_required %}
        files: Mapping[str, FileTypes] | Sequence[tuple[str, FileTypes]],
        {%- endif %}

        auth: BasicAuth | None = None,
        content: str | bytes | None = None,
        {%- if operation.request_body and operation.request_body.is_multipart_form_data and not operation.request_body.are_files_required %}
        files: Mapping[str, FileTypes] | Sequence[tuple[str, FileTypes]] | None = None,
        {%- endif %}

        {%- if operation.request_body %}
        body: {{ typerepr(operation.request_body.schema, document) }} | dict[str, Any] | None = None,
        {%- endif %}

        {#- headers -#}
        {% if operation.headers %}
        headers: {{ classname(operation.fn_name) }}Headers | dict[str, Any] | None = None,
        {% endif %}

        meta: PythogenMetaBox | None = None,
    ) -> {{ responserepr(operation.responses, document) }}:
        """
        {{ operation.method.value|upper }} {{ operation.path_str }}
        Operation ID: {{ operation.operation_id }}
        Summary:      {{ operation.summary }}
        Description:  {{ operation.description }}
        """

        method = "{{ method }}"

        {% if operation.path_params %}
        if isinstance(path_params, {{ classname(operation.fn_name) }}PathParams):
            path = '{{ path }}'.format(**path_params.model_dump(by_alias=True))
        else:
            path = '{{ path }}'.format(**path_params)
        {% else %}
        path = '{{ path }}'
        {% endif %}
        url = f"{self.base_url}{path}"

        {% if operation.query_params %}
        if isinstance(query_params, {{ classname(operation.fn_name) }}QueryParams):
            params = query_params.model_dump(by_alias=True, exclude_none=True)
        else:
            params = query_params
        {% else %}
        params = None
        {% endif %}

        headers_ = self.headers.copy()

        {% if operation.headers %}
        if isinstance(headers, {{ classname(operation.fn_name) }}Headers):
            headers_ = headers.model_dump(by_alias=True, exclude_none=True)
        elif isinstance(headers, dict):
            headers_ = headers
        {% endif %}

        if auth is None:
            auth_ = DEFAULT_AUTH
        elif isinstance(auth, httpx.Auth):
            auth_ = auth
        else:
            auth_ = (auth.username, auth.password)

        {% if operation.request_body %}
        if isinstance(body, dict):
            json = body
        elif isinstance(body, {{typerepr(operation.request_body.schema, document)}}):
            json = body.model_dump(by_alias=True)
        else:
            json = None
        {% endif %}

        {%- if operation.request_body and operation.request_body.is_form_data %}
        headers_.update({'Content-Type': 'application/x-www-form-urlencoded'})
        {%- elif operation.request_body and operation.request_body.is_multipart_form_data %}
        # Content-Type=multipart/form-data doesn't work, because header MUST contain boundaries
        # let library do it for us
        headers_.pop("Content-Type", None)
        {% endif %}

{%- with req_body=operation.request_body -%}
{% include 'request-metrics.j2' %}
{%- endwith %}

        req = RequestBox(
            client_name=self.client_name,
            method=method,
            url=url,
            params=params,
            headers=headers_,
            content=content,
        )

        resp = ResponseBox(
            status_code=response.status_code,
        )

        if meta:
            meta.request = req
            meta.response = resp

        {%- for code, mapper in iterresponsemap(operation.responses) %}

        if response.status_code == {{ code }}:
            {% if code | int >= 400 -%}
            if response.content is None:
                content = None
            else:
                content = response.content[:500]

            if self.logs_integration:
                self.logs_integration.log_error(req, resp)

            {% endif -%}
            return {{ mapper }}
        {%- endfor %}
    {%endfor %}
